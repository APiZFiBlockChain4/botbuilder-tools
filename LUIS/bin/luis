#!/usr/bin/env node
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const pkg = require('../package.json');
const semver = require('semver');
let requiredVersion = pkg.engines.node;
if (!semver.satisfies(process.version, requiredVersion)) {
    console.log(`Required node version ${requiredVersion} not satisfied with current version ${process.version}.`);
    process.exit(1);
}

global.fetch = require('node-fetch'); // Browser compatibility
const assert = require('assert');
const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');
const readlineSync = require('readline-sync');
const minimist = require('minimist');
const chalk = require('chalk');
const request = require('request-promise');
const txtfile = require('read-text-file');

const help = require('../lib/help');
const luis = require('../lib');
const { getServiceManifest } = require('../lib/utils/argsUtil');
const Apps = require('../lib/api/apps/apps');
const Delay = require('await-delay');
const Train = require('../lib/api/train/train');
const { ServiceBase } = require('../lib/api/serviceBase');

let args;

/**
 * Entry for the app
 *
 * @returns {Promise<void>}
 */
async function runProgram() {
    let argvFragment = process.argv.slice(2);
    if (argvFragment.length === 0) {
        argvFragment = ['-h'];
    }
    args = minimist(argvFragment, { string: ['versionId'] });
    if (args._[0] == "luis")
        args._ = args._.slice(1);

    if (args.help ||
        args.h ||
        args['!'] ||
        args._.includes('help')) {
        return help(args, process.stdout);
    }
    if (args.version || args.v) {
        return process.stdout.write(require(path.join(__dirname, '../package.json')).version + "\n");
    }

    // we have to run init before we attempt tload
    if (args._[0] == "init") {
        const result = await initializeConfig();
        if (result) {
            process.stdout.write(`Successfully wrote ${process.cwd()}/.luisrc\n`);
        }
        return;
    }

    const config = await composeConfig();
    ServiceBase.config = config;

    // special non-operation commands
    switch (args._[0]) {
        case "query":
            return await handleQueryCommand(args, config);
        case "set":
            return await handleSetCommand(args, config);
    }

    const serviceManifest = getServiceManifest(args);
    const requestBody = await validateArguments(args, serviceManifest);

    if (serviceManifest.operation.methodAlias == "delete" && serviceManifest.operation.target[0] == 'application') {
        if (!args.q) {
            let getArgs = { _: ['get', 'application'] };
            const getApplication = getServiceManifest(getArgs);
            const result = await luis(config, getApplication, getArgs, {});
            if (result.error) {
                throw new Error(result.error.message);
            }
            let answer = readlineSync.question(`Are you sure you want to delete the application ${result.name} (${result.id})? [no] `, { defaultResponse: 'no' });
            if (answer.length == 0 || answer[0] != 'y') {
                process.stderr.write('delete operation canceled\n');
                process.exit(1);
                return;
            }
        }
    }

    // INVOKE operation
    let result = {};
    result = await luis(config, serviceManifest, args, requestBody);
    if (result.error) {
        throw new Error(result.error.message);
    }

    if (args.wait && (serviceManifest.operation.name == "GetStatus" || serviceManifest.operation.name == "TrainVersion")) {
        result = await waitForTrainingToComplete(config, serviceManifest, args, requestBody);
    }

    // custom output
    switch (serviceManifest.operation.target[0]) {
        case "application":
            switch (serviceManifest.operation.methodAlias) {
                case "add":
                case "import":
                    let response = await new Apps().Get({ authoringKey: config.authoringKey, appId: result });
                    result = await response.json();

                case "get":
                    if (args.msbot) {
                        process.stdout.write(JSON.stringify({
                            type: "luis",
                            name: result.name,
                            id: result.id || result,
                            appId: result.id || result,
                            authoringKey: config.authoringKey,
                            subscriptionKey: config.subscriptionKey || config.authoringKey,
                            version: result.activeVersion || requestBody.initialVersionId
                        }, null, 2) + "\n");
                    } else {
                        process.stdout.write(JSON.stringify(result, null, 2) + "\n");
                    }
                    break;

                default:
                    process.stdout.write(JSON.stringify(result, null, 2) + "\n");
                    break;
            }
            break;

        default:
            process.stdout.write(JSON.stringify(result, null, 2) + "\n");
            break;
    }
}

/**
 * Walks the user though the creation of the .luisrc
 * file and writes it to disk. the App and Version IDs
 * are optional but if omitted, --appId and --versionId
 * flags may be required for some commands.
 *
 * @returns {Promise<*>}
 */
async function initializeConfig() {
    process.stdout.write(chalk.cyan.bold('\nThis util will walk you through creating a .luisrc file\n\nPress ^C at any time to quit.\n\n'));
    //const validRegions = 'westus westus2 eastus eastus2 westcentralus southcentralus westeurope northeurope southeastasia eastasia australiaeast brazilsouth'.split(' ');
    const validRegions = 'westus westeurope australiaeast'.split(' ');
    const questions = [
        'What is your LUIS Authoring key (from luis.ai portal User Settings page)? ',
        `What is your region? [${validRegions.join(', ')}] `,
        'What is your LUIS App ID? [Default: skip] ',
        'What is your LUIS Version ID? [Default: 0.1] ',
    ];

    const prompt = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });

    const answers = [];
    for (let i = 0; i < questions.length; i++) {
        const question = questions[i];
        const answer = await new Promise((resolve) => {

            function doPrompt(promptMessage) {
                prompt.question(promptMessage, response => {
                    if (i === 1 && (!response || !validRegions.includes(response))) {
                        doPrompt(chalk.red.bold(`${response} is not a valid region`) + '\n' + question);
                    } else {
                        resolve(response);
                    }
                });
            }

            doPrompt(question);
        });
        if (i == 2 && answer.trim().length == 0)
            break;
        answers.push(answer.trim());
    }

    const [authoringKey, location, appId, versionId] = answers;
    const config = Object.assign({}, {
        appId,
        authoringKey,
        versionId,
        endpointBasePath: `https://${location}.api.cognitive.microsoft.com/luis/api/v2.0`,
    });
    try {
        await new Promise((resolve, reject) => {
            const confirmation = `\n\nDoes this look ok?\n${JSON.stringify(config, null, 2)}\n[Yes]/No: `;
            prompt.question(confirmation, response => {
                /^(y|yes)$/.test((response || 'yes').toLowerCase()) ? resolve(response) : reject();
            });
        });
    } catch (e) {
        return false;
    }
    await fs.writeJson(path.join(process.cwd(), '.luisrc'), config, { spaces: 2 });
    return true;
}

async function waitForTrainingToComplete(config, serviceManifest, args, requestBody) {
    do {
        let total = 0;
        let trained = 0;
        let response = await new Train().GetStatus({ applicationId: args.applicationId || config.applicationId, versionId: args.versionId || config.versionId });
        if (response.Error)
            throw new Error(response.error);
        result = await response.json();
        isTrained = true;
        for (let model of result) {
            total++;
            let status = model.details.status;
            if (status == "Fail") {
                throw new Error(`Training failed for ${model.modelId}: ${model.details.failureReason}`);
            }
            else if (status == "InProgress" || status == "Queued") {
                isTrained = false;
                break;
            } else if (status == "Success" || status == "UpToDate") {
                trained++;
            }
        }
        if (isTrained == true) {
            process.stderr.write(`${trained}/${total} ${trained / total * 100}%\n`);
            return result;
        }
        await Delay(1000);
        process.stderr.write(`${trained}/${total} ${trained / total}%\r`);
    } while (!isTrained);
}

/**
 * Retrieves the input file to send as
 * the body of the request.
 *
 * @param args
 * @returns {Promise<*>}
 */
async function getFileInput(args) {
    if (typeof args.in !== 'string') {
        return null;
    }
    // Let any errors fall through to the runProgram() promise
    return JSON.parse(await txtfile.read(path.resolve(args.in)));
}

/**
 * Composes the config from the 3 sources that it may reside.
 * Precedence is 1. Arguments, 2. luisrc and 3. env variables
 *
 * @returns {Promise<*>}
 */
async function composeConfig() {
    const { LUIS_APP_ID, LUIS_AUTHORING_KEY, LUIS_VERSION_ID, LUIS_ENDPOINT_BASE_PATH } = process.env;

    const {
        appId: args_appId,
        authoringKey: args_authoringKey,
        versionId: args_versionId,
        endpointBasePath: args_endpointBasePath
    } = args;

    let luisrcJson = {};
    let config;
    try {
        await fs.access(path.join(process.cwd(), '.luisrc'), fs.R_OK);
        luisrcJson = JSON.parse(await txtfile.read(path.join(process.cwd(), '.luisrc')));
    } catch (e) {
        // Do nothing
    } finally {
        config = {
            appId: (args_appId || luisrcJson.appId || LUIS_APP_ID),
            authoringKey: (args_authoringKey || luisrcJson.authoringKey || LUIS_AUTHORING_KEY),
            versionId: (args_versionId || luisrcJson.versionId || LUIS_VERSION_ID),
            endpointBasePath: (args_endpointBasePath || luisrcJson.endpointBasePath || LUIS_ENDPOINT_BASE_PATH)
        };
        validateConfig(config);
    }
    return config;
}

/**
 * Validates the config object to contain the
 * fields necessary for endpoint calls.
 *
 * @param {*} config The config object to validate
 */
function validateConfig(config) {
    // appId and versionId are not validated here since
    // not all operations require these to be present.
    // Validation of specific params are done in the
    // ServiceBase.js
    const { authoringKey, endpointBasePath } = config;
    const messageTail = `is missing from the configuration.\n\nDid you run ${chalk.cyan.bold('luis init')} yet?`;

    assert(typeof authoringKey === 'string', `The authoringKey  ${messageTail}`);
    assert(typeof endpointBasePath === 'string', `The endpointBasePath ${messageTail}`);
}

/**
 * Provides basic validation of the command arguments.
 *
 * @param serviceManifest
 */
async function validateArguments(args, serviceManifest) {
    let error = new Error();
    let body = undefined;

    error.name = 'ArgumentError';
    if (!serviceManifest) {
        let verbs = ["add", "clone", "delete", "export", "get", "import", "list", "publish", "query", "set", "suggest", "train", "update"];
        if (verbs.indexOf(args._[0]) < 0)
            error.message = `'${args._[0]}' is not a valid action`;
        else if (args._.length >= 2)
            error.message = `'${args._[1]}' is not a valid resource`;
        else
            error.message = `missing resource\n`;
        throw error;
    }
    const { operation } = serviceManifest;

    const entitySpecified = typeof args.in === 'string';
    const entityRequired = !!operation.entityName;

    if (entityRequired) {
        if (entitySpecified) {
            body = await getFileInput(args);
        }
        else {
            // make up a request body from command line args
            switch (serviceManifest.operation.target[0]) {
                case "version":
                    switch (serviceManifest.operation.methodAlias) {
                        case "publish":
                            body = {
                                versionId: args.versionId,
                                isStaging: args.staging === true,
                                region: args.region
                            };
                            break;
                    }
                    break;
                default:
                    error.message = `The --in requires an input of type: ${operation.entityType}`;
                    throw error;
            }
        }
    }
    return body;
    // Note that the ServiceBase will validate params that may be required.
}

/**
 * Exits with a non-zero status and prints
 * the error if present or displays the help
 *
 * @param error
 */
async function handleError(error) {
    process.stderr.write('\n' + chalk.red.bold(error + '\n\n'));
    await help(args);
    return 1;
}

async function handleQueryCommand(args, config) {
    let query = args.q || args.question;
    if (!query) {
        process.stderr.write(chalk.red.bold(`missing -q\n`));
        return help(args);
    }
    let appId = args.appId || config.appId;
    if (!appId) {
        process.stderr.write(chalk.red.bold(`missing --appid\n`));
        return help(args);
    }

    let subscriptionKey = args.subscriptionKey || config.authoringKey;
    if (!subscriptionKey) {
        process.stderr.write(chalk.red.bold(`missing --subscriptionKey\n`));
        return help(args);
    }
    let region = args.region || config.region;
    if (!region) {
        process.stderr.write(chalk.red.bold(`missing --region\n`));
        return help(args);
    }

    if (query && appId && subscriptionKey && region) {
        var options = {
            uri: `https://${region}.api.cognitive.microsoft.com/luis/v2.0/apps/${appId}`,
            method: "GET",
            qs: {  // Query string like ?key=value&...
                "subscription-key": `${subscriptionKey}`,
                verbose: true,
                timezoneOffset: 0,
                q: `${query}`
            },
            json: true
        }

        let result = await request(options);
        process.stdout.write(JSON.stringify(result, null, 2) + "\n");
        return;
    }
    return help(args);
}

async function handleSetCommand(args, config) {
    if (args.length == 1 && !(args.a || args.e || args.appId || args.applicationId || args.versionId || args.authoringKey || args.endpoint || args.endpointBasePath || args.versionId)) {
        process.stderr.write(chalk.red.bold(`missing .luisrc argument name: [-appId|--applicationId|--versionId|--endpoint|--authoringKey]\n`));
        return help(args);
    }
    config.endpointBasePath = args.e || args.endpoint || args.endpointBasePath || config.endpointBasePath;
    config.authoringKey = args.authoringKey || config.authoringKey;
    config.versionId = args.versionId || config.versionId;
    config.appId = args.appId || args.applicationId || config.appId;
    if (args._.length > 1) {
        let targetAppName = args._[1].toLowerCase();
        if (targetAppName) {
            let query = await new Apps().List({ authoringKey: args.authoringKey || config.authoringKey });
            let results = await query.json();

            if (results.error) {
                throw new Error(result.error);
            }
            let found = false;
            for (let app of results) {
                if (app.name.toLowerCase() == targetAppName || app.id.toLowerCase() == targetAppName) {
                    config.appId = app.id;
                    config.versionId = app.activeVersion;
                    found = true;
                    break;
                }
            }
            if (!found)
                throw new Error(`Did not find an application with id or name of '${targetAppName}'`);
        }
    }
    await fs.writeJson(path.join(process.cwd(), '.luisrc'), config, { spaces: 2 });
    process.stdout.write(JSON.stringify(config, null, 4) + "\n");
    return true;
}

runProgram()
    .then(process.exit)
    .catch(handleError)
    .then(process.exit);
