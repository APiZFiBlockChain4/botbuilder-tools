/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/versionsMappers";
import { LuisAuthoringContext } from "../luisAuthoringContext";

/** Class representing a Versions. */
export class Versions {
  private readonly client: LuisAuthoringContext;

  /**
   * Create a Versions.
   * @param {LuisAuthoringContext} client Reference to the service client.
   */
  constructor(client: LuisAuthoringContext) {
    this.client = client;
  }

  /**
   * Creates a new version using the current snapshot of the selected application version.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {VersionsCloneOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async cloneWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: Models.VersionsCloneOptionalParams): Promise<msRest.HttpOperationResponse<string>> {
    let versionCloneObject = (options && options.versionCloneObject !== undefined) ? options.versionCloneObject : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            azureRegion,
            appId,
            versionId,
            versionCloneObject
          },
          options),
        cloneOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Gets the application versions info.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {VersionsListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async listWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, options?: Models.VersionsListOptionalParams): Promise<msRest.HttpOperationResponse<Models.VersionInfo[]>> {
    let skip = (options && options.skip !== undefined) ? options.skip : 0;
    let take = (options && options.take !== undefined) ? options.take : 100;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            azureRegion,
            appId,
            skip,
            take
          },
          options),
        listOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Gets the version info.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async getWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.VersionInfo>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            azureRegion,
            appId,
            versionId
          },
          options),
        getOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Updates the name or description of the application version.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {TaskUpdateObject} versionUpdateObject A model containing Name and Description of the
   * application.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async updateWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            azureRegion,
            appId,
            versionId,
            versionUpdateObject
          },
          options),
        updateOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Deletes an application version.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteMethodWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            azureRegion,
            appId,
            versionId
          },
          options),
        deleteMethodOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Exports a LUIS application to JSON format.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async exportMethodWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.LuisApp>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            azureRegion,
            appId,
            versionId
          },
          options),
        exportMethodOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Imports a new version into a LUIS application.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {LuisApp} luisApp A LUIS application structure.
   *
   * @param {VersionsImportMethodOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async importMethodWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, luisApp: Models.LuisApp, options?: Models.VersionsImportMethodOptionalParams): Promise<msRest.HttpOperationResponse<string>> {
    let versionId = (options && options.versionId !== undefined) ? options.versionId : undefined;

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            azureRegion,
            appId,
            versionId,
            luisApp
          },
          options),
        importMethodOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Deleted an unlabelled utterance.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string} utterance The utterance text to delete.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  async deleteUnlabelledUtteranceWithHttpOperationResponse(azureRegion: Models.AzureRegions, appId: string, versionId: string, utterance: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.OperationStatus>> {

    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await this.client.sendOperationRequest(
        msRest.createOperationArguments(
          {
            azureRegion,
            appId,
            versionId,
            utterance
          },
          options),
        deleteUnlabelledUtteranceOperationSpec);
    } catch (err) {
      return Promise.reject(err);
    }
    return Promise.resolve(operationRes);
  }

  /**
   * Creates a new version using the current snapshot of the selected application version.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {VersionsCloneOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  clone(azureRegion: Models.AzureRegions, appId: string, versionId: string): Promise<string>;
  clone(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: Models.VersionsCloneOptionalParams): Promise<string>;
  clone(azureRegion: Models.AzureRegions, appId: string, versionId: string, callback: msRest.ServiceCallback<string>): void;
  clone(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: Models.VersionsCloneOptionalParams, callback: msRest.ServiceCallback<string>): void;
  clone(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: Models.VersionsCloneOptionalParams, callback?: msRest.ServiceCallback<string>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<string>;
    if (!callback) {
      return this.cloneWithHttpOperationResponse(azureRegion, appId, versionId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as string);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.cloneWithHttpOperationResponse(azureRegion, appId, versionId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as string;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets the application versions info.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {VersionsListOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.VersionInfo[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(azureRegion: Models.AzureRegions, appId: string): Promise<Models.VersionInfo[]>;
  list(azureRegion: Models.AzureRegions, appId: string, options: Models.VersionsListOptionalParams): Promise<Models.VersionInfo[]>;
  list(azureRegion: Models.AzureRegions, appId: string, callback: msRest.ServiceCallback<Models.VersionInfo[]>): void;
  list(azureRegion: Models.AzureRegions, appId: string, options: Models.VersionsListOptionalParams, callback: msRest.ServiceCallback<Models.VersionInfo[]>): void;
  list(azureRegion: Models.AzureRegions, appId: string, options?: Models.VersionsListOptionalParams, callback?: msRest.ServiceCallback<Models.VersionInfo[]>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.VersionInfo[]>;
    if (!callback) {
      return this.listWithHttpOperationResponse(azureRegion, appId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.VersionInfo[]);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listWithHttpOperationResponse(azureRegion, appId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.VersionInfo[];
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets the version info.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.VersionInfo} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.VersionInfo} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(azureRegion: Models.AzureRegions, appId: string, versionId: string): Promise<Models.VersionInfo>;
  get(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: msRest.RequestOptionsBase): Promise<Models.VersionInfo>;
  get(azureRegion: Models.AzureRegions, appId: string, versionId: string, callback: msRest.ServiceCallback<Models.VersionInfo>): void;
  get(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VersionInfo>): void;
  get(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.VersionInfo>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.VersionInfo>;
    if (!callback) {
      return this.getWithHttpOperationResponse(azureRegion, appId, versionId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.VersionInfo);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getWithHttpOperationResponse(azureRegion, appId, versionId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.VersionInfo;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Updates the name or description of the application version.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {TaskUpdateObject} versionUpdateObject A model containing Name and Description of the
   * application.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  update(azureRegion: Models.AzureRegions, appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject): Promise<Models.OperationStatus>;
  update(azureRegion: Models.AzureRegions, appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  update(azureRegion: Models.AzureRegions, appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  update(azureRegion: Models.AzureRegions, appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  update(azureRegion: Models.AzureRegions, appId: string, versionId: string, versionUpdateObject: Models.TaskUpdateObject, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.OperationStatus>;
    if (!callback) {
      return this.updateWithHttpOperationResponse(azureRegion, appId, versionId, versionUpdateObject, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.OperationStatus);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.updateWithHttpOperationResponse(azureRegion, appId, versionId, versionUpdateObject, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.OperationStatus;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Deletes an application version.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string): Promise<Models.OperationStatus>;
  deleteMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  deleteMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.OperationStatus>;
    if (!callback) {
      return this.deleteMethodWithHttpOperationResponse(azureRegion, appId, versionId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.OperationStatus);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(azureRegion, appId, versionId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.OperationStatus;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Exports a LUIS application to JSON format.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.LuisApp} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.LuisApp} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  exportMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string): Promise<Models.LuisApp>;
  exportMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: msRest.RequestOptionsBase): Promise<Models.LuisApp>;
  exportMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string, callback: msRest.ServiceCallback<Models.LuisApp>): void;
  exportMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LuisApp>): void;
  exportMethod(azureRegion: Models.AzureRegions, appId: string, versionId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LuisApp>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.LuisApp>;
    if (!callback) {
      return this.exportMethodWithHttpOperationResponse(azureRegion, appId, versionId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.LuisApp);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.exportMethodWithHttpOperationResponse(azureRegion, appId, versionId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.LuisApp;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Imports a new version into a LUIS application.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {LuisApp} luisApp A LUIS application structure.
   *
   * @param {VersionsImportMethodOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {string} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  importMethod(azureRegion: Models.AzureRegions, appId: string, luisApp: Models.LuisApp): Promise<string>;
  importMethod(azureRegion: Models.AzureRegions, appId: string, luisApp: Models.LuisApp, options: Models.VersionsImportMethodOptionalParams): Promise<string>;
  importMethod(azureRegion: Models.AzureRegions, appId: string, luisApp: Models.LuisApp, callback: msRest.ServiceCallback<string>): void;
  importMethod(azureRegion: Models.AzureRegions, appId: string, luisApp: Models.LuisApp, options: Models.VersionsImportMethodOptionalParams, callback: msRest.ServiceCallback<string>): void;
  importMethod(azureRegion: Models.AzureRegions, appId: string, luisApp: Models.LuisApp, options?: Models.VersionsImportMethodOptionalParams, callback?: msRest.ServiceCallback<string>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<string>;
    if (!callback) {
      return this.importMethodWithHttpOperationResponse(azureRegion, appId, luisApp, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as string);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.importMethodWithHttpOperationResponse(azureRegion, appId, luisApp, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as string;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Deleted an unlabelled utterance.
   *
   * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive Services endpoints.
   * Possible values include: 'westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus',
   * 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
   *
   * @param {string} appId The application ID.
   *
   * @param {string} versionId The version ID.
   *
   * @param {string} utterance The utterance text to delete.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OperationStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OperationStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUnlabelledUtterance(azureRegion: Models.AzureRegions, appId: string, versionId: string, utterance: string): Promise<Models.OperationStatus>;
  deleteUnlabelledUtterance(azureRegion: Models.AzureRegions, appId: string, versionId: string, utterance: string, options: msRest.RequestOptionsBase): Promise<Models.OperationStatus>;
  deleteUnlabelledUtterance(azureRegion: Models.AzureRegions, appId: string, versionId: string, utterance: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteUnlabelledUtterance(azureRegion: Models.AzureRegions, appId: string, versionId: string, utterance: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deleteUnlabelledUtterance(azureRegion: Models.AzureRegions, appId: string, versionId: string, utterance: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationStatus>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.OperationStatus>;
    if (!callback) {
      return this.deleteUnlabelledUtteranceWithHttpOperationResponse(azureRegion, appId, versionId, utterance, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.OperationStatus);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.deleteUnlabelledUtteranceWithHttpOperationResponse(azureRegion, appId, versionId, utterance, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.OperationStatus;
        return cb(err, result, data.request, data);
      });
    }
  }

}

// Operation Specifications
const cloneOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/clone",
  urlParameters: [
    {
      parameterPath: "azureRegion",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "AzureRegion",
        type: {
          name: "Enum",
          allowedValues: [
            "westus",
            "westeurope",
            "southeastasia",
            "eastus2",
            "westcentralus",
            "westus2",
            "eastus",
            "southcentralus",
            "northeurope",
            "eastasia",
            "australiaeast",
            "brazilsouth"
          ]
        }
      }
    },
    {
      parameterPath: "appId",
      mapper: {
        required: true,
        serializedName: "appId",
        type: {
          name: "Uuid"
        }
      }
    },
    {
      parameterPath: "versionId",
      mapper: {
        required: true,
        serializedName: "versionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "versionCloneObject",
    mapper: Mappers.TaskUpdateObject
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/versions",
  urlParameters: [
    {
      parameterPath: "azureRegion",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "AzureRegion",
        type: {
          name: "Enum",
          allowedValues: [
            "westus",
            "westeurope",
            "southeastasia",
            "eastus2",
            "westcentralus",
            "westus2",
            "eastus",
            "southcentralus",
            "northeurope",
            "eastasia",
            "australiaeast",
            "brazilsouth"
          ]
        }
      }
    },
    {
      parameterPath: "appId",
      mapper: {
        required: true,
        serializedName: "appId",
        type: {
          name: "Uuid"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "skip",
      mapper: {
        serializedName: "skip",
        defaultValue: 0,
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    },
    {
      parameterPath: "take",
      mapper: {
        serializedName: "take",
        defaultValue: 100,
        constraints: {
          InclusiveMaximum: 500,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            serializedName: "VersionInfoElementType",
            type: {
              name: "Composite",
              className: "VersionInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/",
  urlParameters: [
    {
      parameterPath: "azureRegion",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "AzureRegion",
        type: {
          name: "Enum",
          allowedValues: [
            "westus",
            "westeurope",
            "southeastasia",
            "eastus2",
            "westcentralus",
            "westus2",
            "eastus",
            "southcentralus",
            "northeurope",
            "eastasia",
            "australiaeast",
            "brazilsouth"
          ]
        }
      }
    },
    {
      parameterPath: "appId",
      mapper: {
        required: true,
        serializedName: "appId",
        type: {
          name: "Uuid"
        }
      }
    },
    {
      parameterPath: "versionId",
      mapper: {
        required: true,
        serializedName: "versionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VersionInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/",
  urlParameters: [
    {
      parameterPath: "azureRegion",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "AzureRegion",
        type: {
          name: "Enum",
          allowedValues: [
            "westus",
            "westeurope",
            "southeastasia",
            "eastus2",
            "westcentralus",
            "westus2",
            "eastus",
            "southcentralus",
            "northeurope",
            "eastasia",
            "australiaeast",
            "brazilsouth"
          ]
        }
      }
    },
    {
      parameterPath: "appId",
      mapper: {
        required: true,
        serializedName: "appId",
        type: {
          name: "Uuid"
        }
      }
    },
    {
      parameterPath: "versionId",
      mapper: {
        required: true,
        serializedName: "versionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "versionUpdateObject",
    mapper: {
      ...Mappers.TaskUpdateObject,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/",
  urlParameters: [
    {
      parameterPath: "azureRegion",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "AzureRegion",
        type: {
          name: "Enum",
          allowedValues: [
            "westus",
            "westeurope",
            "southeastasia",
            "eastus2",
            "westcentralus",
            "westus2",
            "eastus",
            "southcentralus",
            "northeurope",
            "eastasia",
            "australiaeast",
            "brazilsouth"
          ]
        }
      }
    },
    {
      parameterPath: "appId",
      mapper: {
        required: true,
        serializedName: "appId",
        type: {
          name: "Uuid"
        }
      }
    },
    {
      parameterPath: "versionId",
      mapper: {
        required: true,
        serializedName: "versionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const exportMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/export",
  urlParameters: [
    {
      parameterPath: "azureRegion",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "AzureRegion",
        type: {
          name: "Enum",
          allowedValues: [
            "westus",
            "westeurope",
            "southeastasia",
            "eastus2",
            "westcentralus",
            "westus2",
            "eastus",
            "southcentralus",
            "northeurope",
            "eastasia",
            "australiaeast",
            "brazilsouth"
          ]
        }
      }
    },
    {
      parameterPath: "appId",
      mapper: {
        required: true,
        serializedName: "appId",
        type: {
          name: "Uuid"
        }
      }
    },
    {
      parameterPath: "versionId",
      mapper: {
        required: true,
        serializedName: "versionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LuisApp
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const importMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "luis/api/v2.0/apps/{appId}/versions/import",
  urlParameters: [
    {
      parameterPath: "azureRegion",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "AzureRegion",
        type: {
          name: "Enum",
          allowedValues: [
            "westus",
            "westeurope",
            "southeastasia",
            "eastus2",
            "westcentralus",
            "westus2",
            "eastus",
            "southcentralus",
            "northeurope",
            "eastasia",
            "australiaeast",
            "brazilsouth"
          ]
        }
      }
    },
    {
      parameterPath: "appId",
      mapper: {
        required: true,
        serializedName: "appId",
        type: {
          name: "Uuid"
        }
      }
    }
  ],
  queryParameters: [
    {
      parameterPath: "versionId",
      mapper: {
        serializedName: "versionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "luisApp",
    mapper: {
      ...Mappers.LuisApp,
      required: true
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer: new msRest.Serializer(Mappers)
};

const deleteUnlabelledUtteranceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "luis/api/v2.0/apps/{appId}/versions/{versionId}/suggest",
  urlParameters: [
    {
      parameterPath: "azureRegion",
      skipEncoding: true,
      mapper: {
        required: true,
        serializedName: "AzureRegion",
        type: {
          name: "Enum",
          allowedValues: [
            "westus",
            "westeurope",
            "southeastasia",
            "eastus2",
            "westcentralus",
            "westus2",
            "eastus",
            "southcentralus",
            "northeurope",
            "eastasia",
            "australiaeast",
            "brazilsouth"
          ]
        }
      }
    },
    {
      parameterPath: "appId",
      mapper: {
        required: true,
        serializedName: "appId",
        type: {
          name: "Uuid"
        }
      }
    },
    {
      parameterPath: "versionId",
      mapper: {
        required: true,
        serializedName: "versionId",
        type: {
          name: "String"
        }
      }
    }
  ],
  requestBody: {
    parameterPath: "utterance",
    mapper: {
      required: true,
      serializedName: "utterance",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer: new msRest.Serializer(Mappers)
};
