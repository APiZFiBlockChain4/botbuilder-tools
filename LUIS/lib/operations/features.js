"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("ms-rest-js");
const Mappers = require("../models/mappers");
const WebResource = msRest.WebResource;
/** Class representing a Features. */
class Features {
    /**
     * Create a Features.
     * @param {LuisAuthoring} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Creates a new
     * pattern feature.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {PatternCreateObject} patternCreateObject The Name and Pattern of the
     * feature.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createPatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternCreateObject, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (patternCreateObject === null || patternCreateObject === undefined) {
                    throw new Error('patternCreateObject cannot be null or undefined.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/patterns';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'POST';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Serialize Request
            let requestContent = null;
            let requestModel = null;
            try {
                if (patternCreateObject !== null && patternCreateObject !== undefined) {
                    let requestModelMapper = Mappers.PatternCreateObject;
                    requestModel = client.serializer.serialize(requestModelMapper, patternCreateObject, 'patternCreateObject');
                    requestContent = JSON.stringify(requestModel);
                }
            }
            catch (error) {
                let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
                    `payload - ${JSON.stringify(patternCreateObject, null, 2)}.`);
                return Promise.reject(serializationError);
            }
            httpRequest.body = requestContent;
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 201) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 201) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = {
                                required: false,
                                serializedName: 'parsedResponse',
                                type: {
                                    name: 'Number'
                                }
                            };
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets all the
     * pattern features.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {FeaturesGetApplicationVersionPatternFeaturesOptionalParams}
     * [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getApplicationVersionPatternFeaturesWithHttpOperationResponse(azureRegion, appId, versionId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let skip = (options && options.skip !== undefined) ? options.skip : 0;
            let take = (options && options.take !== undefined) ? options.take : 100;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (skip !== null && skip !== undefined && typeof skip !== 'number') {
                    throw new Error('skip must be of type number.');
                }
                if (skip !== null && skip !== undefined) {
                    if (skip < 0) {
                        throw new Error('"skip" should satisfy the constraint - "InclusiveMinimum": 0');
                    }
                }
                if (take !== null && take !== undefined && typeof take !== 'number') {
                    throw new Error('take must be of type number.');
                }
                if (take !== null && take !== undefined) {
                    if (take > 500) {
                        throw new Error('"take" should satisfy the constraint - "InclusiveMaximum": 500');
                    }
                    if (take < 0) {
                        throw new Error('"take" should satisfy the constraint - "InclusiveMinimum": 0');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/patterns';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            let queryParamsArray = [];
            if (skip !== null && skip !== undefined) {
                queryParamsArray.push('skip=' + encodeURIComponent(skip.toString()));
            }
            if (take !== null && take !== undefined) {
                queryParamsArray.push('take=' + encodeURIComponent(take.toString()));
            }
            if (queryParamsArray.length > 0) {
                requestUrl += '?' + queryParamsArray.join('&');
            }
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = {
                                required: false,
                                serializedName: 'parsedResponse',
                                type: {
                                    name: 'Sequence',
                                    element: {
                                        required: false,
                                        serializedName: 'PatternFeatureInfoElementType',
                                        type: {
                                            name: 'Composite',
                                            className: 'PatternFeatureInfo'
                                        }
                                    }
                                }
                            };
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Creates a new phraselist feature.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {PhraselistCreateObject} phraselistCreateObject A Phraselist object
     * containing Name, comma-separated Phrases and the isExchangeable boolean.
     * Default value for isExchangeable is true.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addPhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistCreateObject, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (phraselistCreateObject === null || phraselistCreateObject === undefined) {
                    throw new Error('phraselistCreateObject cannot be null or undefined.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'POST';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Serialize Request
            let requestContent = null;
            let requestModel = null;
            try {
                if (phraselistCreateObject !== null && phraselistCreateObject !== undefined) {
                    let requestModelMapper = Mappers.PhraselistCreateObject;
                    requestModel = client.serializer.serialize(requestModelMapper, phraselistCreateObject, 'phraselistCreateObject');
                    requestContent = JSON.stringify(requestModel);
                }
            }
            catch (error) {
                let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
                    `payload - ${JSON.stringify(phraselistCreateObject, null, 2)}.`);
                return Promise.reject(serializationError);
            }
            httpRequest.body = requestContent;
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 201) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 201) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = {
                                required: false,
                                serializedName: 'parsedResponse',
                                type: {
                                    name: 'Number'
                                }
                            };
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Gets all the phraselist features.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {FeaturesListPhraseListsOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPhraseListsWithHttpOperationResponse(azureRegion, appId, versionId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let skip = (options && options.skip !== undefined) ? options.skip : 0;
            let take = (options && options.take !== undefined) ? options.take : 100;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (skip !== null && skip !== undefined && typeof skip !== 'number') {
                    throw new Error('skip must be of type number.');
                }
                if (skip !== null && skip !== undefined) {
                    if (skip < 0) {
                        throw new Error('"skip" should satisfy the constraint - "InclusiveMinimum": 0');
                    }
                }
                if (take !== null && take !== undefined && typeof take !== 'number') {
                    throw new Error('take must be of type number.');
                }
                if (take !== null && take !== undefined) {
                    if (take > 500) {
                        throw new Error('"take" should satisfy the constraint - "InclusiveMaximum": 500');
                    }
                    if (take < 0) {
                        throw new Error('"take" should satisfy the constraint - "InclusiveMinimum": 0');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            let queryParamsArray = [];
            if (skip !== null && skip !== undefined) {
                queryParamsArray.push('skip=' + encodeURIComponent(skip.toString()));
            }
            if (take !== null && take !== undefined) {
                queryParamsArray.push('take=' + encodeURIComponent(take.toString()));
            }
            if (queryParamsArray.length > 0) {
                requestUrl += '?' + queryParamsArray.join('&');
            }
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = {
                                required: false,
                                serializedName: 'parsedResponse',
                                type: {
                                    name: 'Sequence',
                                    element: {
                                        required: false,
                                        serializedName: 'PhraseListFeatureInfoElementType',
                                        type: {
                                            name: 'Composite',
                                            className: 'PhraseListFeatureInfo'
                                        }
                                    }
                                }
                            };
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Gets all the extraction features for the specified application version.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {FeaturesListOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(azureRegion, appId, versionId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let skip = (options && options.skip !== undefined) ? options.skip : 0;
            let take = (options && options.take !== undefined) ? options.take : 100;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (skip !== null && skip !== undefined && typeof skip !== 'number') {
                    throw new Error('skip must be of type number.');
                }
                if (skip !== null && skip !== undefined) {
                    if (skip < 0) {
                        throw new Error('"skip" should satisfy the constraint - "InclusiveMinimum": 0');
                    }
                }
                if (take !== null && take !== undefined && typeof take !== 'number') {
                    throw new Error('take must be of type number.');
                }
                if (take !== null && take !== undefined) {
                    if (take > 500) {
                        throw new Error('"take" should satisfy the constraint - "InclusiveMaximum": 500');
                    }
                    if (take < 0) {
                        throw new Error('"take" should satisfy the constraint - "InclusiveMinimum": 0');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/features';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            let queryParamsArray = [];
            if (skip !== null && skip !== undefined) {
                queryParamsArray.push('skip=' + encodeURIComponent(skip.toString()));
            }
            if (take !== null && take !== undefined) {
                queryParamsArray.push('take=' + encodeURIComponent(take.toString()));
            }
            if (queryParamsArray.length > 0) {
                requestUrl += '?' + queryParamsArray.join('&');
            }
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = Mappers.FeaturesResponseObject;
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets the specified
     * pattern feature's info.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} patternId The pattern feature ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPatternFeatureInfoWithHttpOperationResponse(azureRegion, appId, versionId, patternId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (patternId === null || patternId === undefined || typeof patternId !== 'number') {
                    throw new Error('patternId cannot be null or undefined and it must be of type number.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/patterns/{patternId}';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            requestUrl = requestUrl.replace('{patternId}', encodeURIComponent(patternId.toString()));
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = Mappers.PatternFeatureInfo;
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Updates the
     * pattern, the name and the state of the pattern feature.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} patternId The pattern feature ID.
     *
     * @param {PatternUpdateObject} patternUpdateObject The new values for: - Just
     * a boolean called IsActive, in which case the status of the feature will be
     * changed. - Name, Pattern and a boolean called IsActive to update the
     * feature.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternId, patternUpdateObject, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (patternId === null || patternId === undefined || typeof patternId !== 'number') {
                    throw new Error('patternId cannot be null or undefined and it must be of type number.');
                }
                if (patternUpdateObject === null || patternUpdateObject === undefined) {
                    throw new Error('patternUpdateObject cannot be null or undefined.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/patterns/{patternId}';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            requestUrl = requestUrl.replace('{patternId}', encodeURIComponent(patternId.toString()));
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'PUT';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Serialize Request
            let requestContent = null;
            let requestModel = null;
            try {
                if (patternUpdateObject !== null && patternUpdateObject !== undefined) {
                    let requestModelMapper = Mappers.PatternUpdateObject;
                    requestModel = client.serializer.serialize(requestModelMapper, patternUpdateObject, 'patternUpdateObject');
                    requestContent = JSON.stringify(requestModel);
                }
            }
            catch (error) {
                let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
                    `payload - ${JSON.stringify(patternUpdateObject, null, 2)}.`);
                return Promise.reject(serializationError);
            }
            httpRequest.body = requestContent;
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = Mappers.OperationStatus;
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] Deletes a pattern
     * feature.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} patternId The pattern feature ID.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (patternId === null || patternId === undefined || typeof patternId !== 'number') {
                    throw new Error('patternId cannot be null or undefined and it must be of type number.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/patterns/{patternId}';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            requestUrl = requestUrl.replace('{patternId}', encodeURIComponent(patternId.toString()));
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'DELETE';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = Mappers.OperationStatus;
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Gets phraselist feature info.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be retrieved.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (phraselistId === null || phraselistId === undefined || typeof phraselistId !== 'number') {
                    throw new Error('phraselistId cannot be null or undefined and it must be of type number.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists/{phraselistId}';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            requestUrl = requestUrl.replace('{phraselistId}', encodeURIComponent(phraselistId.toString()));
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'GET';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = Mappers.PhraseListFeatureInfo;
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Updates the phrases, the state and the name of the phraselist feature.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be updated.
     *
     * @param {FeaturesUpdatePhraseListOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let phraselistUpdateObject = (options && options.phraselistUpdateObject !== undefined) ? options.phraselistUpdateObject : undefined;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (phraselistId === null || phraselistId === undefined || typeof phraselistId !== 'number') {
                    throw new Error('phraselistId cannot be null or undefined and it must be of type number.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists/{phraselistId}';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            requestUrl = requestUrl.replace('{phraselistId}', encodeURIComponent(phraselistId.toString()));
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'PUT';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Serialize Request
            let requestContent = null;
            let requestModel = null;
            try {
                if (phraselistUpdateObject !== null && phraselistUpdateObject !== undefined) {
                    let requestModelMapper = Mappers.PhraselistUpdateObject;
                    requestModel = client.serializer.serialize(requestModelMapper, phraselistUpdateObject, 'phraselistUpdateObject');
                    requestContent = JSON.stringify(requestModel);
                }
            }
            catch (error) {
                let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
                    `payload - ${JSON.stringify(phraselistUpdateObject, null, 2)}.`);
                return Promise.reject(serializationError);
            }
            httpRequest.body = requestContent;
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = Mappers.OperationStatus;
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Deletes a phraselist feature.
     *
     * @param {AzureRegions} azureRegion Supported Azure regions for Cognitive
     * Services endpoints. Possible values include: 'westus', 'westeurope',
     * 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus',
     * 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'
     *
     * @param {string} appId The application ID.
     *
     * @param {string} versionId The version ID.
     *
     * @param {number} phraselistId The ID of the feature to be deleted.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (azureRegion) {
                    let allowedValues = ['westus', 'westeurope', 'southeastasia', 'eastus2', 'westcentralus', 'westus2', 'eastus', 'southcentralus', 'northeurope', 'eastasia', 'australiaeast', 'brazilsouth'];
                    if (!allowedValues.some(function (item) { return item === azureRegion; })) {
                        throw new Error(azureRegion + ' is not a valid value. The valid values are: ' + allowedValues);
                    }
                }
                else {
                    throw new Error('azureRegion cannot be null or undefined.');
                }
                if (appId === null || appId === undefined || typeof appId.valueOf() !== 'string' || !msRest.isValidUuid(appId)) {
                    throw new Error('appId cannot be null or undefined and it must be of type string and must be a valid string.');
                }
                if (versionId === null || versionId === undefined || typeof versionId.valueOf() !== 'string') {
                    throw new Error('versionId cannot be null or undefined and it must be of type string.');
                }
                if (phraselistId === null || phraselistId === undefined || typeof phraselistId !== 'number') {
                    throw new Error('phraselistId cannot be null or undefined and it must be of type number.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Construct URL
            let baseUrl = this.client.baseUri;
            let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'apps/{appId}/versions/{versionId}/phraselists/{phraselistId}';
            requestUrl = requestUrl.replace('{AzureRegion}', azureRegion);
            requestUrl = requestUrl.replace('{appId}', encodeURIComponent(appId.toString()));
            requestUrl = requestUrl.replace('{versionId}', encodeURIComponent(versionId));
            requestUrl = requestUrl.replace('{phraselistId}', encodeURIComponent(phraselistId.toString()));
            // Create HTTP transport objects
            let httpRequest = new WebResource();
            httpRequest.method = 'DELETE';
            httpRequest.url = requestUrl;
            httpRequest.headers = {};
            // Set Headers
            httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
            if (options && options.customHeaders) {
                for (let headerName in options.customHeaders) {
                    if (options.customHeaders.hasOwnProperty(headerName)) {
                        httpRequest.headers[headerName] = options.customHeaders[headerName];
                    }
                }
            }
            // Send Request
            let operationRes;
            try {
                operationRes = yield client.sendRequest(httpRequest);
                let response = operationRes.response;
                let statusCode = response.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = response.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(response);
                    let parsedErrorResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            let resultMapper = Mappers.ErrorResponse;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.bodyAsJson;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            let resultMapper = Mappers.OperationStatus;
                            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(response);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    createPatternFeature(azureRegion, appId, versionId, patternCreateObject, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.createPatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternCreateObject, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.createPatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternCreateObject, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    getApplicationVersionPatternFeatures(azureRegion, appId, versionId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getApplicationVersionPatternFeaturesWithHttpOperationResponse(azureRegion, appId, versionId, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getApplicationVersionPatternFeaturesWithHttpOperationResponse(azureRegion, appId, versionId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    addPhraseList(azureRegion, appId, versionId, phraselistCreateObject, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.addPhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistCreateObject, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.addPhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistCreateObject, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    listPhraseLists(azureRegion, appId, versionId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listPhraseListsWithHttpOperationResponse(azureRegion, appId, versionId, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listPhraseListsWithHttpOperationResponse(azureRegion, appId, versionId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    list(azureRegion, appId, versionId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(azureRegion, appId, versionId, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listWithHttpOperationResponse(azureRegion, appId, versionId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    getPatternFeatureInfo(azureRegion, appId, versionId, patternId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getPatternFeatureInfoWithHttpOperationResponse(azureRegion, appId, versionId, patternId, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getPatternFeatureInfoWithHttpOperationResponse(azureRegion, appId, versionId, patternId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    updatePatternFeature(azureRegion, appId, versionId, patternId, patternUpdateObject, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.updatePatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternId, patternUpdateObject, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.updatePatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternId, patternUpdateObject, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    deletePatternFeature(azureRegion, appId, versionId, patternId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.deletePatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternId, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deletePatternFeatureWithHttpOperationResponse(azureRegion, appId, versionId, patternId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    getPhraseList(azureRegion, appId, versionId, phraselistId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getPhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getPhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    updatePhraseList(azureRegion, appId, versionId, phraselistId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.updatePhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.updatePhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
    deletePhraseList(azureRegion, appId, versionId, phraselistId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.deletePhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options).then((operationRes) => {
                return Promise.resolve(operationRes.bodyAsJson);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deletePhraseListWithHttpOperationResponse(azureRegion, appId, versionId, phraselistId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.bodyAsJson;
                return cb(err, result, data.request, data.response);
            });
        }
    }
}
exports.Features = Features;
//# sourceMappingURL=features.js.map